<single_line>   ::= SingleLine line:<line>
<many_lines>    ::= ManyLines lines:<line>*

<line>          ::= BlankLine NEWLINE
                  | <stmt>

<func_def>      ::= FuncDef 'def' name:NAME params:<parameters> '->' func_type:CLASS ':' body:<suite>

<parameters>    ::= Parameters '(' &params{param,param_list}:<params_list>? ')'
<params_list>   ::= SingleParam param:<parameter>
                  | ParamList param:<parameter> ',' param_list:<params_list>
<parameter>     ::= Parameter external:NAME? internal:NAME ':' param_type:CLASS

<suite>         ::= <simple_stmt>
                  | ComplexSuite NEWLINE INDENT stmt:<stmt> stmts:<stmt>* DEDENT

<stmt>          ::= <simple_stmt>
                  | <compound_stmt>

<simple_stmt>   ::= SimpleStmt expr:<expr_stmt> NEWLINE
<expr_stmt>     ::= PassStmt 'pass'
                  | ReturnStmt 'return' expr:<expr_list>?
                  | ExprListStmt &exprs{expr,expr_list}:<expr_list>
<expr_list>     ::= SimpleExprList expr:<expr>
                  | ExprList expr:<expr> ',' expr_list:<expr_list>

<expr>          ::= Expr atom:<atom> trailers:<trailer>*
<atom>          ::= ParenExpr '(' &exprs{expr,expr_list}:<expr_list>? ')'
                  | Name NAME
                  | Number NUMBER
                  | Ellipsis '...'
                  | Zilch 'Zilch'
                  | True 'True'
                  | False 'False'
<trailer>       ::= Args '(' &args{arg,arg_list}:<arg_list>? ')'
                  | Field '.' NAME

<compound_stmt> ::= <func_def>
                  | <class_def>
                  | <interface_def>
                  | <data_def>

<class_def>     ::= ClassDef 'class' @<common_def>
<interface_def> ::= InterfaceDef 'interface' @<common_def>
<data_def>      ::= DataDef 'data' @<common_def>

<common_def>    ::= CommonDef name:NAME args:<arguments>? ':' body:<suite>

<arguments>     ::= Args '(' args:<arg_list>? ')'
<arg_list>      ::= SingleArg arg:<argument>
                  | ArgList arg:<argument> ',' arg_list:<arg_list>
<argument>      ::= <expr>
