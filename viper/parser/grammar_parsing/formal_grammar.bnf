<single_input>  ::= SingleNewline NEWLINE
                  | SimpleLine line:<simple_stmt>
                  | ComplexLine line:<compound_stmt> NEWLINE
<file_input>    ::= FileInput lines:<file_lines>* ENDMARKER
<file_lines>    ::= FileNewline NEWLINE
                  | FileStmt stmt:<stmt>

<suite>         ::= SimpleSuite stmt:<simple_stmt>
                  | ComplexSuite NEWLINE INDENT stmts:<stmt>+ DEDENT

<stmt>          ::= <simple_stmt>
                  | <compound_stmt>

<simple_stmt>   ::= SimpleStmt expr_stmt:<expr_stmt> NEWLINE
<compound_stmt> ::= <func_def>
                  | <class_def>
                  | <interface_def>
                  | <data_def>
                  | <if_expr>

<if_expr>       ::= IfExpr 'if' cond:<test> ':' if_body:<suite> elif_exprs:<elif_expr>* else_expr:<else_expr>?
<elif_expr>     ::= ElifExpr 'elif' cond:<test> ':' elif_body:<suite>
<else_expr>     ::= ElseExpr 'else' ':' else_body:<suite>

<expr_stmt>     ::= PassStmt 'pass'
                  | ReturnStmt 'return' exprs:<op_expr_list>
                  | PlainExpr expr:<op_expr>
<test>          ::= Test test:<or_test>
<or_test>       ::= OrTest tests:<and_test>&+{or}
<and_test>      ::= AndTest tests:<not_test>&+{and}
<not_test>      ::= NotTest tests:<op_expr>&+{not}

<op_expr_list>  ::= OpExprList op_exprs:<op_expr>&*{,}
<op_expr>       ::= OpExpr left_op:OPERATOR? expr:<value> sub_op_exprs:<sub_op_expr>* right_op:OPERATOR?
<sub_op_expr>   ::= SubOpExpr op:OPERATOR expr:<value>

<value>         ::= Value atom:<atom> trailers:<trailer>*
<atom>          ::= ParenExpr '(' expr_list:<op_expr_list> ')'
                  | Name name:NAME
                  | Number num:NUMBER
                  | Ellipsis '...'
<trailer>       ::= Call '(' args:<value>&*{,} ')'
                  | Field '.' field:NAME

<func_def>      ::= FuncDef 'def' name:NAME '(' params:<parameter>&*{,} ')' '->' func_type:CLASS ':' body:<suite>
<parameter>     ::= Parameter external:NAME? internal:NAME ':' param_type:CLASS

<class_def>     ::= ClassDef 'class' name:CLASS args:<arguments>? ':' body:<suite>
<interface_def> ::= InterfaceDef 'interface' name:CLASS args:<arguments>? ':' body:<suite>
<data_def>      ::= DataDef 'data' name:CLASS args:<arguments>? ':' body:<suite>

<arguments>     ::= Arguments '(' args:<value>&*{,} ')'
