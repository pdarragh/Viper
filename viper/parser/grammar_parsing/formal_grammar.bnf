<single_input>  ::= SingleNewline NEWLINE
                  | SimpleLine line:<simple_stmt>
                  | ComplexLine line:<compound_stmt> NEWLINE
<file_input>    ::= FileInput lines:<file_lines>* ENDMARKER
<file_lines>    ::= FileNewline NEWLINE
                  | FileStmt stmt:<stmt>

<suite>         ::= SimpleSuite stmt:<simple_stmt>
                  | ComplexSuite NEWLINE INDENT stmt:<stmt> stmts:<stmt>* DEDENT

<stmt>          ::= SimpleStmt expr_stmt:<expr_stmt> NEWLINE
                  | FuncDefStmt @<func_def>
                  | ClassDefStmt @<class_def>
                  | InterfaceDefStmt @<interface_def>
                  | DataDefStmt @<data_def>

<expr_stmt>     ::= PassStmt 'pass'
                  | ReturnStmt 'return' exprs:<op_expr_list>?
                  | ExprListStmt @<op_expr_list>
<op_expr_list>  ::= OpExprList op_exprs:<op_expr>&{,}
<op_expr>       ::= OpExpr left_ops:OPERATOR* expr:<expr> sub_op_exprs:<sub_op_expr>* right_ops:OPERATOR*
<sub_op_expr>   ::= SubOpExpr first_op:OPERATOR ops:OPERATOR* expr:<expr>

<expr_list>     ::= ExprList exprs:<expr>&{,}
<expr>          ::= Expr atom:<atom> trailers:<trailer>*
<atom>          ::= ParenExpr '(' expr_list:<op_expr_list>? ')'
                  | Name name:NAME
                  | Number num:NUMBER
                  | Ellipsis '...'
<trailer>       ::= Args '(' @<arg_list> ')'
                  | Field '.' field:NAME

<func_def>      ::= FuncDef 'def' name:NAME @<parameters> '->' func_type:CLASS ':' body:<suite>
<parameters>    ::= Parameters '(' params:<parameter>&{,}? ')'
<parameter>     ::= Parameter external:NAME? internal:NAME ':' param_type:CLASS

<class_def>     ::= ClassDef 'class' @<common_def>
<interface_def> ::= InterfaceDef 'interface' @<common_def>
<data_def>      ::= DataDef 'data' @<common_def>

<common_def>    ::= CommonDef name:CLASS args:<arguments>? ':' body:<suite>
<arguments>     ::= Arguments '(' args:<expr>&{,}? ')'
